.. _kotlin-sync-atlas-search:

============
Atlas Search
============

.. facet::
   :name: genre
   :values: reference

.. meta::
   :keywords: full text, text analyzer, pipeline
   :description: Learn about how to use Atlas Search in the {+driver-long+}.

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In this guide, you can learn how to use the {+driver-short+} to
run Atlas Search queries on a collection. Atlas Search enables you to perform
full-text searches on collections hosted on MongoDB Atlas. 

For more information about Atlas Search queries, see the :atlas:`Atlas Search
documentation </atlas-search/>` in the Atlas manual.

Atlas search queries are different than traditional database queries, as they
are intended to meet more general information needs. Where a database query must
follow a strict syntax, search queries can be for simple text matching, but can
also look for similar phrases, number or date ranges, or use regular expressions
or wildcards. They rely on Atlas Search indexes to specify the behavior of the
search and which fields to index.

For information about setting up indexes, see the :ref:`Atlas Search and Vector
Search Indexes <kotlin-sync-atlas-search-index>` page.

Building Queries
----------------

Atlas Search queries take the form of an aggregation pipeline stage. Atlas
Search provides ``$search`` and ``$searchMeta`` stages, both of which must be the first
stage in any query pipeline

For more information about pipelines in the {+driver-short+}, see the :ref:`kotlin-sync-aggregation`
page.

For more information about Atlas pipeline stages, see the :atlas:`Choose the
Aggregation Pipeline Stage </atlas-search/query-syntax/>`__ page in the Atlas
manual. 

.. sharedinclude:: dbx/jvm/atlas-search-operator-helpers.rst

   .. replacement:: atlas-query-operators-example

    .. code-block:: kotlin

        Bson searchStageFilters = Aggregates.search(
            SearchOperator.compound()
                .filter(
                    List.of(
                        SearchOperator.text(fieldPath("genres"), "Drama"),
                        SearchOperator.phrase(fieldPath("cast"), "sylvester stallone"),
                        SearchOperator.numberRange(fieldPath("year")).gtLt(1980, 1989),
                        SearchOperator.wildcard(fieldPath("title"),"Rocky *")
                        )));

   .. replacement:: searchoperator-interface-api-docs

    the `SearchOperator Interface API documentation <{+core-api+}/com/mongodb/client/model/search/SearchOperator.html>`__


