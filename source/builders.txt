.. _kotlin-sync-builders:

=========================
Use Builders Code Pattern
=========================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. .. toctree::

..    /fundamentals/builders/aggregates
..    /fundamentals/builders/filters
..    /fundamentals/builders/indexes
..    /fundamentals/builders/projections
..    /fundamentals/builders/sort
..    /fundamentals/builders/updates

Overview
--------

This page describes how to implement the builders pattern in your code and describes
benefits of using builder classes.

The {+driver-short+} provides type-safe builder classes and methods that enable developers to
efficiently build queries and aggregations. To learn more about the builders pattern,
see `Type-safe builders <https://kotlinlang.org/docs/type-safe-builders.html>`__ in the
{+language+} documentation.

Why Use the Builders Code Pattern?
----------------------------------

If you use only plain {+language+} to construct BSON query documents, you are not
able to identify errors in your code until runtime. When you use builder classes, you can
write operators as methods and any syntax errors will be caught at compile time.

Example
-------

This section provides three equivalent ways to fetch the ``email`` field values of documents
in the ``users`` collection that meet the following criteria:

- ``gender`` value is ``"female"``
- ``age`` value is greater than ``29``

The following data class models the documents in the ``users`` collection:

.. literalinclude:: /includes/builders/builders.kt
   :start-after: start-user-class
   :end-before: end-user-class
   :language: kotlin
   :copyable:
   :dedent:

The following data class models the results returned by our query:

.. literalinclude:: /includes/builders/builders.kt
   :start-after: start-result-class
   :end-before: end-result-class
   :language: kotlin
   :copyable:
   :dedent:

MongoDB Query API
~~~~~~~~~~~~~~~~~

The following sample performs the query by using the MongoDB Query API:

.. code-block:: js

   collection.find(
       { "gender": "female", "age" : { "$gt": 29 }},
       { "_id": 0, "email": 1 }
   )

Document Class Filter
~~~~~~~~~~~~~~~~~~~~~

The following example performs the query by using the ``Document`` class to construct the
query filter:

.. literalinclude:: /includes/builders/builders.kt
   :start-after: start-find
   :end-before: end-find
   :language: kotlin
   :copyable:
   :dedent:

Builders Pattern
~~~~~~~~~~~~~~~~

The following example performs the query by using the builders pattern:

.. literalinclude:: /includes/builders/builders.kt
   :start-after: start-find-builders
   :end-before: end-find-builders
   :language: kotlin
   :copyable:
   :dedent:

.. TODO: Uncomment as pages get built

.. Available Builders
.. ------------------

.. The following pages describe how to implement the different classes of builders
.. available in the {+driver-short+}.

.. - :ref:`Aggregates <aggregates-builders>` for building aggregation pipelines.
.. - :ref:`Filters <filters-builders>` for building query filters.
.. - :ref:`Indexes <indexes-builders>` for creating index keys.
.. - :ref:`Projections <projections-builders>` for building projections. 
.. - :ref:`Sorts <sorts-builders>` for building sort criteria.
.. - :ref:`Updates <updates-builders>` for building updates.